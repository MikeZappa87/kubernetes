// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: pkg/apis/runtime/beta/api.proto

package beta

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	KNI_AttachNetwork_FullMethodName     = "/kni.KNI/AttachNetwork"
	KNI_DetachNetwork_FullMethodName     = "/kni.KNI/DetachNetwork"
	KNI_QueryPodNetwork_FullMethodName   = "/kni.KNI/QueryPodNetwork"
	KNI_SetupNodeNetwork_FullMethodName  = "/kni.KNI/SetupNodeNetwork"
	KNI_QueryNodeNetworks_FullMethodName = "/kni.KNI/QueryNodeNetworks"
)

// KNIClient is the client API for KNI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KNIClient interface {
	AttachNetwork(ctx context.Context, in *AttachNetworkRequest, opts ...grpc.CallOption) (*AttachNetworkResponse, error)
	DetachNetwork(ctx context.Context, in *DetachNetworkRequest, opts ...grpc.CallOption) (*DetachNetworkResponse, error)
	QueryPodNetwork(ctx context.Context, in *QueryPodNetworkRequest, opts ...grpc.CallOption) (*QueryPodNetworkResponse, error)
	SetupNodeNetwork(ctx context.Context, in *SetupNodeNetworkRequest, opts ...grpc.CallOption) (*SetupNodeNetworkResponse, error)
	QueryNodeNetworks(ctx context.Context, in *QueryNodeNetworksRequest, opts ...grpc.CallOption) (*QueryNodeNetworksResponse, error)
}

type kNIClient struct {
	cc grpc.ClientConnInterface
}

func NewKNIClient(cc grpc.ClientConnInterface) KNIClient {
	return &kNIClient{cc}
}

func (c *kNIClient) AttachNetwork(ctx context.Context, in *AttachNetworkRequest, opts ...grpc.CallOption) (*AttachNetworkResponse, error) {
	out := new(AttachNetworkResponse)
	err := c.cc.Invoke(ctx, KNI_AttachNetwork_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kNIClient) DetachNetwork(ctx context.Context, in *DetachNetworkRequest, opts ...grpc.CallOption) (*DetachNetworkResponse, error) {
	out := new(DetachNetworkResponse)
	err := c.cc.Invoke(ctx, KNI_DetachNetwork_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kNIClient) QueryPodNetwork(ctx context.Context, in *QueryPodNetworkRequest, opts ...grpc.CallOption) (*QueryPodNetworkResponse, error) {
	out := new(QueryPodNetworkResponse)
	err := c.cc.Invoke(ctx, KNI_QueryPodNetwork_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kNIClient) SetupNodeNetwork(ctx context.Context, in *SetupNodeNetworkRequest, opts ...grpc.CallOption) (*SetupNodeNetworkResponse, error) {
	out := new(SetupNodeNetworkResponse)
	err := c.cc.Invoke(ctx, KNI_SetupNodeNetwork_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kNIClient) QueryNodeNetworks(ctx context.Context, in *QueryNodeNetworksRequest, opts ...grpc.CallOption) (*QueryNodeNetworksResponse, error) {
	out := new(QueryNodeNetworksResponse)
	err := c.cc.Invoke(ctx, KNI_QueryNodeNetworks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KNIServer is the server API for KNI service.
// All implementations should embed UnimplementedKNIServer
// for forward compatibility
type KNIServer interface {
	AttachNetwork(context.Context, *AttachNetworkRequest) (*AttachNetworkResponse, error)
	DetachNetwork(context.Context, *DetachNetworkRequest) (*DetachNetworkResponse, error)
	QueryPodNetwork(context.Context, *QueryPodNetworkRequest) (*QueryPodNetworkResponse, error)
	SetupNodeNetwork(context.Context, *SetupNodeNetworkRequest) (*SetupNodeNetworkResponse, error)
	QueryNodeNetworks(context.Context, *QueryNodeNetworksRequest) (*QueryNodeNetworksResponse, error)
}

// UnimplementedKNIServer should be embedded to have forward compatible implementations.
type UnimplementedKNIServer struct {
}

func (UnimplementedKNIServer) AttachNetwork(context.Context, *AttachNetworkRequest) (*AttachNetworkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttachNetwork not implemented")
}
func (UnimplementedKNIServer) DetachNetwork(context.Context, *DetachNetworkRequest) (*DetachNetworkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DetachNetwork not implemented")
}
func (UnimplementedKNIServer) QueryPodNetwork(context.Context, *QueryPodNetworkRequest) (*QueryPodNetworkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryPodNetwork not implemented")
}
func (UnimplementedKNIServer) SetupNodeNetwork(context.Context, *SetupNodeNetworkRequest) (*SetupNodeNetworkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetupNodeNetwork not implemented")
}
func (UnimplementedKNIServer) QueryNodeNetworks(context.Context, *QueryNodeNetworksRequest) (*QueryNodeNetworksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryNodeNetworks not implemented")
}

// UnsafeKNIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KNIServer will
// result in compilation errors.
type UnsafeKNIServer interface {
	mustEmbedUnimplementedKNIServer()
}

func RegisterKNIServer(s grpc.ServiceRegistrar, srv KNIServer) {
	s.RegisterService(&KNI_ServiceDesc, srv)
}

func _KNI_AttachNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttachNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KNIServer).AttachNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KNI_AttachNetwork_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KNIServer).AttachNetwork(ctx, req.(*AttachNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KNI_DetachNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetachNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KNIServer).DetachNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KNI_DetachNetwork_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KNIServer).DetachNetwork(ctx, req.(*DetachNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KNI_QueryPodNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPodNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KNIServer).QueryPodNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KNI_QueryPodNetwork_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KNIServer).QueryPodNetwork(ctx, req.(*QueryPodNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KNI_SetupNodeNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetupNodeNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KNIServer).SetupNodeNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KNI_SetupNodeNetwork_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KNIServer).SetupNodeNetwork(ctx, req.(*SetupNodeNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KNI_QueryNodeNetworks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryNodeNetworksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KNIServer).QueryNodeNetworks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KNI_QueryNodeNetworks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KNIServer).QueryNodeNetworks(ctx, req.(*QueryNodeNetworksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KNI_ServiceDesc is the grpc.ServiceDesc for KNI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KNI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kni.KNI",
	HandlerType: (*KNIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AttachNetwork",
			Handler:    _KNI_AttachNetwork_Handler,
		},
		{
			MethodName: "DetachNetwork",
			Handler:    _KNI_DetachNetwork_Handler,
		},
		{
			MethodName: "QueryPodNetwork",
			Handler:    _KNI_QueryPodNetwork_Handler,
		},
		{
			MethodName: "SetupNodeNetwork",
			Handler:    _KNI_SetupNodeNetwork_Handler,
		},
		{
			MethodName: "QueryNodeNetworks",
			Handler:    _KNI_QueryNodeNetworks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/apis/runtime/beta/api.proto",
}
